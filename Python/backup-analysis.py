import pandas as pd
from tkinter import Tk, filedialog
from tabulate import tabulate

def calculate_invalid(df, x, a, b, op):
    df2 = df.copy()
    a = df2[a]
    b = df2[b]
    
    df2[x] = op(a, b)
    
    mismatch = (df2[x] - df2[x]).abs() > 1e-2
    invalid = df2[mismatch].copy()
    
    cols = list(invalid.columns)
    x_index = cols.index(x)
    cols.insert(x_index + 1, cols.pop(cols.index(x)))
    
    return invalid[cols]


def check_tcv(df):
    """
    Manually calculates the Total Contract Value (TCV) via Total Progress to Date and Balance
    and checks for mismatches.

    Args:
        df (df): Df of the export.

    Returns:
        df: Df of the export with rows where TCV is not equal to the calculated TCV.
    """
    df2 = df.copy()
    df2["Calculated TCV (TPD + Balance)"] = df2["Total Progress to Date"] + df2["Balance"]
    
    mismatch = (df2["Total Contract Value"] - df2["Calculated TCV (TPD + Balance)"]).abs() > 1e-2
    invalid = df2[mismatch].copy()

    cols = list(invalid.columns)
    tcv_index = cols.index("Total Contract Value")
    cols.insert(tcv_index + 1, cols.pop(cols.index("Calculated TCV (TPD + Balance)")))

    return invalid[cols]


def check_tpd_calculation_prev_curr(df):
    """
    Manually calculates the Total Progress to Date (TPD) via Previous Billed and Current Billing
    and checks for mismatches.

    Args:
        df (dataframe): Df of the export.

    Returns:
        df: Df of the export with rows where TPD is not equal to the calculated TPD.
    """
    df2 = df.copy()
    df2["Calculated TPD (PB + CB)"] = df2["Previously Billed"] + df2["Current Billing"]

    mismatch = (df2["Total Progress to Date"] - df2["Calculated TPD (PB + CB)"]).abs() > 1e-2
    invalid = df2[mismatch].copy()

    cols = list(invalid.columns)
    tpd_index = cols.index("Total Progress to Date")
    cols.insert(tpd_index + 1, cols.pop(cols.index("Calculated TPD (PB + CB)")))

    return invalid[cols]


def check_tpd_calculation_perc_complete(df):
    """
    Manually calculates the Total Progress to Date (TPD) via % Completed and checks for mismatches.

    Args:
        df (dataframe): Df of the export.

    Returns:
        df: Df of the export with rows where TPD is not equal to the calculated TPD.
    """
    df2 = df.copy()
    df2["Calculated TPD (TCV * %C)"] = df2["Total Contract Value"] * df2["% Complete"]

    mismatch = (df2["Total Progress to Date"] - df2["Calculated TPD (TCV * %C)"]).abs() > 1e-2
    invalid = df2[mismatch].copy()

    cols = list(invalid.columns)
    tpd_index = cols.index("Total Progress to Date")
    cols.insert(tpd_index + 1, cols.pop(cols.index("Calculated TPD (TCV * %C)")))

    return invalid[cols]


def check_percent_complete(df):
    """
    Checks for rows where the % Complete is not between 0 and 100.

    Args:
        df (dataframe): Df of the export.

    Returns:
        df: Df of the export with rows where % Complete is not between 0 and 100.
    """
    invalid = df[(df["% Complete"] < 0) | (df["% Complete"] > 100)]
    return invalid


def check_nan(df):
    """
    Checks for rows where NaN values are present.
    Drops the rows from the df.

    Args:
        df (dataframe): Df of the export.

    Returns:
        df: Df of the export with rows where NaN values are present.
    """
    nan = df[df.isnull().any(axis=1)]
    df.drop(nan.index, inplace=True)
    return nan


def check_empty_description(df):
    """
    Checks for rows where the Work Release # number is not present.
    Drops the rows from the df.

    Args:
        df (dataframe): Df of the export.

    Returns:
        df: Df of the export with rows where the Work Release # number is not present.
    """
    missing = df[df["Description"].isnull()]
    df.drop(missing.index, inplace=True)
    return missing


def select_file():
    """
    Creates a file dialog to select an Excel file.

    Raises:
        Exception: If no file is selected.

    Returns:
        String: Filepath of the export.
    """
    Tk().withdraw()  # Hide the root window
    file_path = filedialog.askopenfilename(
        title="Select Excel File",
        filetypes=[("Excel files", "*.xlsx *.xls")],
    )
    if not file_path:
        raise Exception("No file selected.")
    return file_path


def main():
    """
    Analyzes the export file generated by the backup-generation.py script.
    """
    file_path = select_file()
    df = pd.read_excel(file_path)

    print("Loaded file:", file_path)

    missing = check_empty_description(df)
    nan = check_nan(df)
    invalid_perc_complete = check_percent_complete(df)
    invalid_tpd_perc_complete = check_tpd_calculation_perc_complete(df)
    invalid_tpd_prev_curr = check_tpd_calculation_prev_curr(df)
    invalid_tcv = calculate_invalid(df, "Total Contract Value", "Total Progress to Date", "Balance", lambda a, b: a + b)
    
    if not missing.empty:
        print("\nPrinting rows where Description is missing:")
        print(tabulate(missing, headers="keys", tablefmt="psql"))
        
    if not nan.empty:
        print("\nPrinting rows where NaN values are present:")
        print(tabulate(nan, headers="keys", tablefmt="psql"))
        
    if not invalid_perc_complete.empty:
        print("\nPrinting rows where % Complete is invalid, not including missing rows: \n")
        print(tabulate(invalid_perc_complete, headers="keys", tablefmt="psql"))
    
    if not invalid_tpd_perc_complete.empty or not invalid_tpd_prev_curr.empty:
        print(
            "\nPrinting rows where Total Progress to Date is invalid, not including missing rows: \n"
        )
        if not invalid_tpd_perc_complete.empty:
            print(tabulate(invalid_tpd_perc_complete, headers="keys", tablefmt="psql"))
        if not invalid_tpd_prev_curr.empty:
            print(tabulate(invalid_tpd_prev_curr, headers="keys", tablefmt="psql"))

    if not invalid_tcv.empty:
        print(
            "\nPrinting rows where Total Contract Value is invalid, not including missing rows: \n"
        )
        print(tabulate(invalid_tcv, headers="keys", tablefmt="psql"))


if __name__ == "__main__":
    main()
